#!/usr/bin/env groovy

// This Jenkinsfile was built to work with multi-branch pipeline job
// This will extract the branch name based on Git Flow to be used 
//     for docker image tags and environment deployments
String safeBranchName = env.BRANCH_NAME.replaceAll("[/_.\$%^&*()@!]","-")
String openshiftCredential='<openshift_credential_id>'
String openshiftAppName='<enter name for app>' // used for both docker repo and openshift application name 1:1

String dockerCredential='<docker credential id>'
String dockerOrg='<docker org>'
String dockerPath="docker.optum.com/$dockerOrg/$openshiftAppName:$safeBranchName" // ORG AND REPO MUST EXIST

String jenkinsEmailTo='<add jenkins email address>'

@Library("com.optum.jenkins.pipeline.library@master") _

pipeline {
  agent {
    label 'kitchen-sink'
  }
  environment {
    TECH_USER ='opi_tech_eng'
  }
stages {
    stage ('Build') {
      steps {
        dir('.') {
            glDotNetCorePublish( dotNetCoreVersion: '2.2.100', additionalPublishOptions: '-o publishedApp', additionalRestoreOptions: '--configfile Api/Nuget.Config')
        }
      }
    }
    stage ('Sonar') {
      steps {
        dir('.') {
            glSonarScannerDotnetCore( sonarServer:'sonar', dotNetCoreVersion: '2.2.100')
        }
      }
    }
    stage ('Docker') {
      steps {
          glDockerImageBuildPush( tag: "$dockerPath", dockerCredentialsId: "$dockerCredential") 
      }
    }
    stage ('Deploy To Openshift') {
      steps {
          script {
              if (env.BRANCH_NAME.contains('feature/')) {   
                  def openshiftUrl='<openshift url for dev>'
                  def openshiftProject = '<openshift project name>'
                  // For logging as code project
                  // See https://github.optum.com/paymentintegrity/logging-as-code
                  def logstashHostUrl="logstash.${openshiftProject}.svc" // example logstash.openshift-project-name.svc
                  // delete resources if they exist
                  glOpenshiftDeleteServiceResources credentials: "$openshiftCredential" ,
                      ocpUrl:"$openshiftUrl",
                      project: "$openshiftProject",
                      serviceName: "$openshiftAppName"
                  
                  glOpenshiftDeployTemplate( credentials: "$openshiftCredential",
                      templateFile: 'api-deploy.yaml', ocpUrl:"$openshiftUrl", 
                      project: "$openshiftProject", 
                      templateParams: ["DOCKER_PATH_AND_IMAGE":"$dockerPath", "OPENSHIFT_APP_NAME":"$openshiftAppName", "LOGSTASH_URL":"$logstashHostUrl"]) 
              }
              else if (env.BRANCH_NAME == 'develop') {
                  def openshiftUrl='<openshift url for test>'
                  def openshiftProject = '<openshift project name>'
                  // For logging as code project
                  // See https://github.optum.com/paymentintegrity/logging-as-code
                  def logstashHostUrl="logstash.${openshiftProject}.svc" // example logstash.openshift-project-name.svc

                  // delete resources if they exist
                  glOpenshiftDeleteServiceResources credentials: "$openshiftCredential" ,
                      ocpUrl:"$openshiftUrl",
                      project: "$openshiftProject",
                      serviceName: "$openshiftAppName"
                  
                  glOpenshiftDeployTemplate( credentials: "$openshiftCredential",
                      templateFile: 'api-deploy.yaml', ocpUrl:"$openshiftUrl", 
                      project: "$openshiftProject", 
                      templateParams: ["DOCKER_PATH_AND_IMAGE":"$dockerPath", "OPENSHIFT_APP_NAME":"$openshiftAppName", "LOGSTASH_URL":"$logstashHostUrl"])
              }
              else if (env.BRANCH_NAME.contains('release')) {
                  def openshiftUrl='<openshift url for stage>'
                  def openshiftProject = '<openshift project name>'
                  // For logging as code project
                  // See https://github.optum.com/paymentintegrity/logging-as-code
                  def logstashHostUrl="logstash.${openshiftProject}.svc" // example logstash.openshift-project-name.svc

                  // delete resources if they exist
                  glOpenshiftDeleteServiceResources credentials: "$openshiftCredential" ,
                      ocpUrl:"$openshiftUrl",
                      project: "$openshiftProject",
                      serviceName: "$openshiftAppName"

                  glOpenshiftDeployTemplate( credentials: "$openshiftCredential",
                      templateFile: 'api-deploy.yaml', ocpUrl:"$openshiftUrl", 
                      project: "$openshiftProject", 
                      templateParams: ["DOCKER_PATH_AND_IMAGE":"$dockerPath", "OPENSHIFT_APP_NAME":"$openshiftAppName", "LOGSTASH_URL":"$logstashHostUrl"])
              }
              else if (env.BRANCH_NAME == 'master') {
                  error('Remove this after initial scan by multi-branch pipeline')
                  def openshiftUrl='<openshift url for prod>'
                  def openshiftProject = '<openshift project name>'
                  // For logging as code project
                  // See https://github.optum.com/paymentintegrity/logging-as-code
                  def logstashHostUrl="logstash.${openshiftProject}.svc" // example logstash.openshift-project-name.svc
                  
                  // delete resources if they exist
                  glOpenshiftDeleteServiceResources credentials: "$openshiftCredential" ,
                      ocpUrl:"$openshiftUrl",
                      project: "$openshiftProject",
                      serviceName: "$openshiftAppName"
                  
                  glOpenshiftDeployTemplate( credentials: "$openshiftCredential",
                      templateFile: 'api-deploy.yaml', ocpUrl:"$openshiftUrl", 
                      project: "$openshiftProject", 
                      templateParams: ["DOCKER_PATH_AND_IMAGE":"$dockerPath", "OPENSHIFT_APP_NAME":"$openshiftAppName", "LOGSTASH_URL":"$logstashHostUrl"])
                  }
              else {
                  error('Nothing deployed to OSE because there isn\'t a Deploy to OSE pipeline step defined for branch: '+ env.BRANCH_NAME)
              }
          }
      }
    }          
}  
post {
        always {
            echo 'This will always run'
		emailext body:  "Build URL: ${BUILD_URL}",
			 subject: "$currentBuild.currentResult-$JOB_NAME",
			 to: "$jenkinsEmailTo"
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}
